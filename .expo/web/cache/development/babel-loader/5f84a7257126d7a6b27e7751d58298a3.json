{"ast":null,"code":"global.swisscalc = global.swisscalc || {};\nglobal.swisscalc.display = global.swisscalc.display || {};\n\nglobal.swisscalc.display.numericDisplay = function (groupDigits, maxLength) {\n  this._display = \"0\";\n  this._groupDigits = typeof groupDigits === \"undefined\" ? true : groupDigits;\n  this._maxLength = typeof maxLength === \"undefined\" ? 20 : maxLength;\n};\n\nglobal.swisscalc.display.numericDisplay.prototype.getCurrentDisplay = function () {\n  return this._groupDigits ? global.swisscalc.lib.format.groupDigits(this._display) : this._display;\n};\n\nglobal.swisscalc.display.numericDisplay.prototype.addDigit = function (digit) {\n  if (this._display.length >= this._maxLength) return;\n  if (digit == \".\" && this._display.indexOf(\".\") >= 0) return;\n  if (digit != \".\" && this._display == \"0\") this._display = \"\";\n  this._display += digit;\n};\n\nglobal.swisscalc.display.numericDisplay.prototype.negate = function () {\n  var fChar = this._display.charAt(0);\n\n  this._display = fChar == \"-\" ? this._display.substring(1) : \"-\" + this._display;\n};\n\nglobal.swisscalc.display.numericDisplay.prototype.backspace = function () {\n  var len = this._display.length;\n  if (len == 1) this._display = \"0\";else if (len == 2 && this._display.charAt(0) == \"-\") this._display = \"0\";else this._display = this._display.substring(0, len - 1);\n};\n\nglobal.swisscalc.display.numericDisplay.prototype.clear = function () {\n  this._display = \"0\";\n};\n\nglobal.swisscalc.display.numericDisplay.prototype.getDisplayValue = function () {\n  return parseFloat(this._display);\n};\n\nglobal.swisscalc.display.numericDisplay.prototype.setDisplayValue = function (val) {\n  this._display = val.toString();\n};","map":{"version":3,"sources":["C:/Users/dmitr/Desktop/ReactNative/Codempire/lib/swisscalc.display.numericDisplay.js"],"names":["global","swisscalc","display","numericDisplay","groupDigits","maxLength","_display","_groupDigits","_maxLength","prototype","getCurrentDisplay","lib","format","addDigit","digit","length","indexOf","negate","fChar","charAt","substring","backspace","len","clear","getDisplayValue","parseFloat","setDisplayValue","val","toString"],"mappings":"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","sourcesContent":["//\r\n// Eric Morgan\r\n// Copyright (c) 2014. \r\n//\r\n\r\n// Class for displaying a floating-point number.\r\n\r\nglobal.swisscalc = global.swisscalc || {};\r\nglobal.swisscalc.display = global.swisscalc.display || {};\r\n\r\n// Constructor.\r\n// groupDigits: Should digits be grouped by a comma (true/false) (default: true)\r\n// maxLength: Maximum number of characters to display (default: 20)\r\nglobal.swisscalc.display.numericDisplay = function(groupDigits, maxLength) { \r\n\tthis._display = \"0\";\r\n\tthis._groupDigits = (typeof groupDigits === \"undefined\") ? true : groupDigits;\r\n\tthis._maxLength = (typeof maxLength === \"undefined\") ? 20 : maxLength;\r\n};\r\n\r\n// Returns current display\r\nglobal.swisscalc.display.numericDisplay.prototype.getCurrentDisplay = function() { \r\n\treturn (this._groupDigits)\r\n\t\t? global.swisscalc.lib.format.groupDigits(this._display)\r\n\t\t: this._display;\r\n};\r\n\r\n// Adds the given character to the display, if appropriate.\r\n// The only valid digits are: 0...9, . (decimal). Must be a string.\r\nglobal.swisscalc.display.numericDisplay.prototype.addDigit = function(digit) {\r\n\t// Don't go past maximum length...\r\n\tif (this._display.length >= this._maxLength)\r\n\t\treturn;\r\n\t\t\r\n\t// Don't add multiple decimals...\r\n\tif (digit == \".\" && this._display.indexOf(\".\") >= 0)\r\n\t\treturn;\r\n\t\t\r\n\t// If not a decimal and display is empty, remove 0...\r\n\tif (digit != \".\" && this._display == \"0\")\r\n\t\tthis._display = \"\";\r\n\t\t\r\n\t// Add the digit to the end (note: '.' will result in '0.')...\r\n\tthis._display += digit;\r\n};\r\n\r\n// Adds or removes the negative sign\r\nglobal.swisscalc.display.numericDisplay.prototype.negate = function() {\r\n\tvar fChar = this._display.charAt(0);\r\n\tthis._display = (fChar == \"-\") ? this._display.substring(1) : \"-\" + this._display;\r\n};\r\n\r\n// Removes the last character if possible\r\nglobal.swisscalc.display.numericDisplay.prototype.backspace = function() {\r\n\tvar len = this._display.length;\t\r\n\tif (len == 1)\r\n\t\tthis._display = \"0\";\r\n\telse if (len == 2 && this._display.charAt(0) == \"-\")\r\n\t\tthis._display = \"0\";\r\n\telse\r\n\t\tthis._display = this._display.substring(0, len - 1);\r\n};\r\n\r\n// Clears the display\r\nglobal.swisscalc.display.numericDisplay.prototype.clear = function() {\r\n\tthis._display = \"0\";\r\n};\r\n\r\n// Returns _display as a numeric value\r\nglobal.swisscalc.display.numericDisplay.prototype.getDisplayValue = function() {\r\n\treturn parseFloat(this._display);\r\n};\r\n\r\n// Formats the value and sets the display. \"val\" should be a number.\r\nglobal.swisscalc.display.numericDisplay.prototype.setDisplayValue = function(val) {\r\n\t// TODO: May need to do some formatting/rounding...\r\n\tthis._display = val.toString();\r\n};\r\n"]},"metadata":{},"sourceType":"script"}