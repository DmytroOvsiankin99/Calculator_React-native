{"ast":null,"code":"global.swisscalc = global.swisscalc || {};\nglobal.swisscalc.display = global.swisscalc.display || {};\n\nglobal.swisscalc.display.fixedPointDisplay = function (numDecimalPlaces, maxLength) {\n  this._display = \"\";\n  this._isNegative = false;\n  this._numDecimalPlaces = typeof numDecimalPlaces === \"undefined\" ? 2 : numDecimalPlaces;\n  this._maxLength = typeof maxLength === \"undefined\" ? 20 : maxLength;\n};\n\nglobal.swisscalc.display.fixedPointDisplay.prototype.getCurrentDisplay = function () {\n  var str = \"\";\n  var len = this._display.length;\n  var num = this._numDecimalPlaces;\n\n  if (num === 0) {\n    if (len === 0) return \"0\";\n    if (this._isNegative) return \"-\" + this._display;\n    return this._display;\n  }\n\n  if (len > num) {\n    var p1 = this._display.substring(0, len - num);\n\n    var p2 = this._display.substring(len - num, len);\n\n    str = p1 + \".\" + p2;\n  } else if (len == num) {\n    str = \"0.\" + this._display;\n  } else if (len < num) {\n    str = \"0.\";\n\n    for (var i = 0; i < num - len; i++) {\n      str += \"0\";\n    }\n\n    str += this._display;\n  }\n\n  if (this._isNegative) str = \"-\" + str;\n  return str;\n};\n\nglobal.swisscalc.display.fixedPointDisplay.prototype.addDigit = function (digit) {\n  if (this._display.length >= this._maxLength) return;\n  if (digit == \".\") return;\n  if (this._display.length === 0 && digit == \"0\") return;\n  this._display += digit;\n};\n\nglobal.swisscalc.display.fixedPointDisplay.prototype.negate = function () {\n  this._isNegative = !this._isNegative;\n};\n\nglobal.swisscalc.display.fixedPointDisplay.prototype.backspace = function () {\n  var len = this._display.length;\n  if (len == 1) this._display = \"\";else if (len == 2 && this._display.charAt(0) == \"-\") this._display = \"\";else this._display = this._display.substring(0, len - 1);\n};\n\nglobal.swisscalc.display.fixedPointDisplay.prototype.clear = function () {\n  this._display = \"\";\n};\n\nglobal.swisscalc.display.fixedPointDisplay.prototype.getDisplayValue = function () {\n  var sDisplay = this.getCurrentDisplay();\n  return parseFloat(sDisplay);\n};","map":{"version":3,"sources":["C:/Users/dmitr/Desktop/ReactNative/Codempire/lib/swisscalc.display.fixedPointDisplay.js"],"names":["global","swisscalc","display","fixedPointDisplay","numDecimalPlaces","maxLength","_display","_isNegative","_numDecimalPlaces","_maxLength","prototype","getCurrentDisplay","str","len","length","num","p1","substring","p2","i","addDigit","digit","negate","backspace","charAt","clear","getDisplayValue","sDisplay","parseFloat"],"mappings":"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","sourcesContent":["//\r\n// Eric Morgan\r\n// Copyright (c) 2014. \r\n//\r\n\r\n// Class for displaying a fixed-point number.\r\n\r\nglobal.swisscalc = global.swisscalc || {};\r\nglobal.swisscalc.display = global.swisscalc.display || {};\r\n\r\n// Constructor.\r\n// numDecimalPlaces: Number of characters to show past decimal (default: 2)\r\n// maxLength: Maximum number of characters to display (default: 20)\r\nglobal.swisscalc.display.fixedPointDisplay = function(numDecimalPlaces, maxLength) { \r\n\tthis._display = \"\";\r\n\tthis._isNegative = false;\r\n\tthis._numDecimalPlaces = (typeof numDecimalPlaces === \"undefined\") ? 2 : numDecimalPlaces;\r\n\tthis._maxLength = (typeof maxLength === \"undefined\") ? 20 : maxLength;\r\n};\r\n\r\n// Returns current display\r\nglobal.swisscalc.display.fixedPointDisplay.prototype.getCurrentDisplay = function() { \r\n\tvar str = \"\";\r\n\tvar len = this._display.length;\t\t// Number of characters\r\n\tvar num = this._numDecimalPlaces;\t// Number of decimal places\r\n\t\r\n\t// If no decimal places, handle separately...\r\n\tif (num === 0) { \r\n\t\tif (len === 0) return \"0\";\t\t\t\t\t\t\t// If no characters, return 0\r\n\t\tif (this._isNegative) return \"-\" + this._display;\t// If negative, add a \"-\"\r\n\t\treturn this._display;\t\t\t\t\t\t\t\t// Otherwise, display as-is\r\n\t}\r\n\t\r\n\tif (len > num) {\r\n\t\tvar p1  = this._display.substring(0, len - num);\r\n\t\tvar p2  = this._display.substring(len - num, len);\r\n\t\tstr = p1 + \".\" + p2;\r\n\t} else if (len == num) {\r\n\t\tstr = \"0.\" + this._display;\r\n\t} else if (len < num) { \r\n\t\tstr = \"0.\";\r\n\t\tfor (var i = 0; i < num - len; i++) str += \"0\";\r\n\t\tstr += this._display;\r\n\t}\r\n\t\r\n\tif (this._isNegative) str = \"-\" + str;\r\n\t\r\n\treturn str;\r\n};\r\n\r\n// Adds the given character to the display, if appropriate.\r\n// The only valid digits are: 0...9, . (decimal). Must be a string.\r\nglobal.swisscalc.display.fixedPointDisplay.prototype.addDigit = function(digit) {\r\n\t// Don't go past maximum length...\r\n\tif (this._display.length >= this._maxLength)\r\n\t\treturn;\r\n\t\t\r\n\t// Don't add decimals even though it says you can...\r\n\tif (digit == \".\")\r\n\t\treturn;\r\n\t\t\r\n\t// If display is empty, don't add any 0's...\r\n\tif (this._display.length === 0 && digit == \"0\")\r\n\t\treturn;\r\n\t\t\r\n\t// Add the digit to the end (note: '.' will result in '0.')...\r\n\tthis._display += digit;\r\n};\r\n\r\n// Adds or removes the negative sign\r\nglobal.swisscalc.display.fixedPointDisplay.prototype.negate = function() {\r\n\tthis._isNegative = !this._isNegative;\r\n};\r\n\r\n// Removes the last character if possible\r\nglobal.swisscalc.display.fixedPointDisplay.prototype.backspace = function() {\r\n\tvar len = this._display.length;\t\r\n\tif (len == 1)\r\n\t\tthis._display = \"\";\r\n\telse if (len == 2 && this._display.charAt(0) == \"-\")\r\n\t\tthis._display = \"\";\r\n\telse\r\n\t\tthis._display = this._display.substring(0, len - 1);\r\n};\r\n\r\n// Clears the display\r\nglobal.swisscalc.display.fixedPointDisplay.prototype.clear = function() {\r\n\tthis._display = \"\";\r\n};\r\n\r\n// Returns _display as a numeric value\r\nglobal.swisscalc.display.fixedPointDisplay.prototype.getDisplayValue = function() {\r\n\tvar sDisplay = this.getCurrentDisplay();\r\n\treturn parseFloat(sDisplay);\r\n};"]},"metadata":{},"sourceType":"script"}